{"version":3,"sources":["components/clock/clock.js","components/clock/index.js","App.js","serviceWorker.js","index.js"],"names":["CircularIntegration","classes","this","props","animateClass","done","react_default","a","createElement","className","root","style","flexDirection","color","fontWeight","marginBottom","fontSize","margin","wrapper","Fab_default","height","width","backgroundColor","Math","floor","sec","CircularProgress_default","size","fabProgress","variant","value","marginTop","React","Component","withStyles","theme","display","alignItems","spacing","unit","position","buttonSuccess","green","&:hover","top","left","zIndex","buttonProgress","marginLeft","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","tiId","setInterval","e","setState","setTimeout","clearInterval","background","justifyContent","flex","clock","components_clock","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uQAuCMA,mLAEK,IACCC,EAAYC,KAAKC,MAAjBF,QAEJG,EAAcF,KAAKC,MAAME,KAAQ,0BAAH,GAClC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWR,EAAQS,KAAMC,MAAO,CAACC,cAAc,WAChDV,KAAKC,MAAME,KACXC,EAAAC,EAAAC,cAAA,YADgBF,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACE,MAAM,OAAOC,WAAW,IAAIC,aAAa,GAAGC,SAAS,KAAlE,YAElBV,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACM,OAAO,QAASR,UAAWR,EAAQiB,QAAQd,GACtDE,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CAAKI,MAAO,CAAES,OAAQ,IAAKC,MAAO,IAAKC,gBAAgB,YACrDhB,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACK,SAAS,GAAIH,MAAM,SAAUU,KAAKC,MAAMtB,KAAKC,MAAMsB,OAElEnB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACEI,MAAO,CAACE,MAAM,WACdc,KAAM,IACNlB,UAAWR,EAAQ2B,YACnBC,QAAQ,SACRC,MAAsB,IAAf5B,KAAKC,MAAMsB,IAAQ,MAI9BnB,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACE,MAAM,OAAOC,WAAW,IAAIiB,UAAU,GAAGf,SAAS,KAC5Dd,KAAKC,MAAME,KAAK,yBAAyB,mBAxBlB2B,IAAMC,WAmCzBC,uBAnEA,SAAAC,GAAK,MAAK,CACvBzB,KAAM,CACJ0B,QAAS,OACTC,WAAY,UAEdnB,QAAS,CACPD,OAAQkB,EAAMG,QAAQC,KACtBC,SAAU,YAEZC,cAAe,CACbnB,gBAAiBoB,IAAM,KACvBC,UAAW,CACTrB,gBAAiBoB,IAAM,OAG3Bd,YAAa,CACXf,MAAO6B,IAAM,KACbF,SAAU,WACVI,KAAM,EACNC,MAAO,EACPC,OAAQ,GAEVC,eAAgB,CACdlC,MAAO6B,IAAM,KACbF,SAAU,WACVI,IAAK,MACLC,KAAM,MACNd,WAAY,GACZiB,YAAa,MAuCFd,CAAmBlC,GC9CnBiD,cAxBb,SAAAA,EAAY9C,GAAM,IAAA+C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjD,KAAA+C,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjD,KAAAiD,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArD,KAAMC,KACDqD,MAAM,CAAC/B,IAAI,GAAIpB,MAAK,GAFT6C,mFAIC,IAAAO,EAAAvD,KACbwD,EAAKC,YAAY,SAACC,GACpBH,EAAKI,SAAS,CAACpC,IAAIgC,EAAKD,MAAM/B,IAAI,MAClC,KACFqC,WAAW,SAACF,GACVG,cAAcL,GACdD,EAAKI,SAAS,CAACxD,MAAK,KACL,IAAfH,KAAKsD,MAAM/B,sCAGb,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGE,MAAO,CAACqD,WAAW,UAAU5C,OAAO,QAASC,MAAM,QAASe,QAAQ,OAAO6B,eAAiB,SAASrD,cAAe,WACpIN,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACyB,QAAQ,OAAO8B,KAAK,KACjC5D,EAAAC,EAAAC,cAAC2D,EAAD,CAAO1C,IAAKvB,KAAKsD,MAAM/B,IAAI,EAAEvB,KAAKsD,MAAM/B,IAAI,EAAGpB,KAAMH,KAAKsD,MAAMnD,OAChEC,EAAAC,EAAAC,cAAA,OAAKG,MAAO,CAACyB,QAAQ,OAAO8B,KAAK,aAnBvBjC,aCSHgB,2LANX,OACE3C,EAAAC,EAAAC,cAAC4D,EAAD,aAHYnC,cCQEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.35ed0f50.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport green from '@material-ui/core/colors/green';\nimport Fab from '@material-ui/core/Fab';\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  wrapper: {\n    margin: theme.spacing.unit,\n    position: 'relative',\n  },\n  buttonSuccess: {\n    backgroundColor: green[500],\n    '&:hover': {\n      backgroundColor: green[700],\n    },\n  },\n  fabProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: -6,\n    left: -6,\n    zIndex: 1,\n  },\n  buttonProgress: {\n    color: green[500],\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    marginTop: -12,\n    marginLeft: -12,\n  },\n});\n\nclass CircularIntegration extends React.Component {\n\n  render() {\n    const { classes } = this.props;\n    \n    var animateClass=!this.props.done?'':' animated infinite tada'\n    return (\n      <div className={classes.root} style={{flexDirection:'column'}}>\n        {!this.props.done?<div style={{color:'#fff',fontWeight:900,marginBottom:10,fontSize:30}}>Wait for</div>:\n          <div/>}\n        <div style={{margin:'auto'}} className={classes.wrapper+animateClass}>\n          <Fab style={{ height: 200, width: 200, backgroundColor:'#4caf50'}}>\n            <div style={{fontSize:80, color:'#fff'}}>{Math.floor(this.props.sec)}</div>\n          </Fab>\n          <CircularProgress \n            style={{color:'#ffeb3b'}}\n            size={210} \n            className={classes.fabProgress} \n            variant=\"static\"\n            value={this.props.sec*100/20}\n\n          />\n        </div>\n        <div style={{color:'#fff',fontWeight:900,marginTop:10,fontSize:30}}>\n          {this.props.done?'Requesting question...':'Seconds'}\n        </div>\n      </div>\n    );\n  }\n}\n\nCircularIntegration.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CircularIntegration);","import React, { Component } from 'react';\nimport Clock from './clock'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={sec:20, done:false}\n  }\n  componentDidMount(){\n    var tiId=setInterval((e)=>{\n      this.setState({sec:this.state.sec-1/10})\n    },100)\n    setTimeout((e)=>{\n      clearInterval(tiId)\n      this.setState({done:true})\n    },this.state.sec*1000)\n  }\n  render() {\n    return (\n      <div className=\"\" style={{background:'#3f51b5',height:'100vh', width:'100vw', display:'flex','justifyContent':'center',flexDirection: 'column'}}>\n        <div style={{display:'flex',flex:1}}></div>\n        <Clock sec={this.state.sec>0?this.state.sec:0} done={this.state.done}/>\n        <div style={{display:'flex',flex:1}}></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Clock from './components/clock';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Clock/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}